#!/bin/bash

POOL="gulf.moneroocean.stream:20008"
POOL_PASSWORD="MaxattaxOpenSUSE" # gitleaks:allow
WALLET="46cWMT5YP2A8a8bSDzj3r7C7XkCkTWvJz2FFDjqnk8hnATYCrBJD22R1cyZJwK4tDTNGHFMTuSkCbNZeaYjhPADx9QisCcA"

USE_CPU=0
USE_GPU=0
MINING=0
IN_USE=0
LOCKED=0
SSH_ACTIVE=0
CHARGING=1
INTERVAL=30
LOCKED_INTERVAL=1
IDLE_TO_START=10

# Tmux
session="Mining"
w_htop="HTOP"
w_cpu="CPU"
w_gpu="GPU"

if [ -n "$DEBUG" ]; then
    echo "Debug mode has been enabled"

    INTERVAL=1
    LOCKED_INTERVAL=1
    IDLE_TO_START=1
fi

timestamp() {
    echo "[$(date +%T)]"
}

log() {
    echo "$(timestamp) $1"
}

getCharging() {
    device="$(upower -e | grep BAT)"

    if [ -n "$device" ]; then
        state="$(upower -i $device | grep state | awk '{ printf $2  };')"
        if [ "$state" = "charging" ]; then
            echo "1"
        else
            echo "0"
        fi
    else
        # This device does not have a battery.
        echo "1"
    fi
}

getActiveSSHSessions() {
    lines="$(ps aux | grep sshd | wc -l)"
    echo "$(((lines - 1) / 2))"
}

getLockedTime() {
    # Time is in milliseconds.
    rawTime=""
    if [ "$XDG_CURRENT_DESKTOP" == "GNOME" ]; then
        rawTime="$(dbus-send --session --dest=org.gnome.ScreenSaver --type=method_call --print-reply --reply-timeout=20000 /org/gnome/ScreenSaver org.gnome.ScreenSaver.GetActiveTime | grep uint32 | awk '{ printf $2 };')"
    else
        rawTime="$(dbus-send --session --dest=org.freedesktop.ScreenSaver --type=method_call --print-reply --reply-timeout=20000 /org/freedesktop/ScreenSaver org.freedesktop.ScreenSaver.GetActiveTime | grep uint32 | awk '{ printf $2 };')"
    fi

    ((rawTime /= 1000))

    echo "$rawTime"
}

getLocked() {
    rawBool=""
    if [ "$XDG_CURRENT_DESKTOP" == "GNOME" ]; then
        rawBool="$(dbus-send --session --dest=org.gnome.ScreenSaver --type=method_call --print-reply --reply-timeout=20000 /org/gnome/ScreenSaver org.gnome.ScreenSaver.GetActive | grep boolean | awk '{ printf $2 };')"
    else
        rawBool="$(dbus-send --session --dest=org.freedesktop.ScreenSaver --type=method_call --print-reply --reply-timeout=20000 /org/freedesktop/ScreenSaver org.freedesktop.ScreenSaver.GetActive | grep boolean | awk '{ printf $2 };')"
    fi

    if [ "$rawBool" = "true" ]; then
        echo "1"
    else
        echo "0"
    fi
}

initMining() {
    if [ -n "$(command -v xmrig)" ]; then
        log "CPU miner detected as available ..."
        USE_CPU=1
    else
        USE_CPU=0
    fi

    if [ -n "$(command -v xmrig-nvidia)" ]; then
        log "GPU miner detected as available ..."
        USE_GPU=1
    else
        USE_GPU=0
    fi

    tmux has-session -t "$session" 2> /dev/null

    if [ "$?" -ne 1 ]; then
        log "An idling tmux session already exists; exiting"
        exit
    fi

    tmux new-session -d -s "$session" -n "$w_htop"
    if [ "$USE_CPU" -eq 1 ]; then
        tmux new-window -n "$w_cpu" -t "$session"
        tmux send-keys -t "$session:$w_cpu" "clear && xmrig -o $POOL -u $WALLET -p $POOL_PASSWORD --cpu-priority 1 -k" C-m "p" C-m
    fi
    if [ "$USE_GPU" -eq 1 ]; then
        tmux new-window -n "$w_gpu" -t "$session"
        if [ -n "$(command -v xmrig-nvidia)" ]; then
            tmux send-keys -t "$session:$w_gpu" "clear && xmrig-nvidia -o $POOL -u $WALLET -p $POOL_PASSWORD --bfactor 10 --bsleep 800 -k" C-m "p" C-m
        elif [ -n "$(command -v xmrig-amd)" ]; then
            tmux send-keys -t "$session:$w_gpu" "clear && xmrig-amd -o $POOL -u $WALLET -p $POOL_PASSWORD --bfactor 10 --bsleep 800 -k" C-m "p" C-m
        fi
    fi

    tmux send-keys -t "$session:$w_htop" "htop" C-m
    log "Started background tmux session containing mining programs"
}

killMining() {
    if [ "$USE_CPU" -eq 1 ]; then
        tmux send-keys -t "$session:$w_cpu" C-c
    fi

    if [ "$USE_GPU" -eq 1 ]; then
        tmux send-keys -t "$session:$w_gpu" C-c
    fi

    tmux send-keys -t "$session:$w_htop" C-c
    tmux kill-session -t "$session"
}

startMining() {
    MINING=1

    if [ "$USE_CPU" -eq 1 ]; then
        tmux send-keys -t "$session:$w_cpu" "r" C-m
        log "CPU miner started ..."
    fi

    if [ "$USE_GPU" -eq 1 ]; then
        tmux send-keys -t "$session:$w_gpu" "r" C-m
        log "GPU miner started ..."
    fi
}

stopMining() {
    if [ "$MINING" -eq 1 ]; then
        tmux send-keys -t "$session:$w_cpu" "p" C-m
        tmux send-keys -t "$session:$w_gpu" "p" C-m
        log "Mining stopped"
        MINING=0
    fi
}

tick() {
    if [ "$(getLocked)" -eq 1 ]; then
        if [ "$LOCKED" -eq 0 ]; then
            log "Screen has locked"
        fi

        LOCKED=1
    else
        if [ "$LOCKED" -eq 1 ]; then
            log "Screen has unlocked"
        fi

        LOCKED=0
    fi

    if [ "$(getActiveSSHSessions)" -ge 1 ]; then
        if [ "$SSH_ACTIVE" -eq 0 ]; then
            log "Remote SSH connection established"
        fi

        SSH_ACTIVE=1
    else
        if [ "$SSH_ACTIVE" -eq 1 ]; then
            log "Remote SSH connection terminated"
        fi

        SSH_ACTIVE=0
    fi

    if [ "$(getCharging)" -eq 1 ]; then
        if [ "$CHARGING" -eq 0 ]; then
            log "Connected to AC"
        fi

        CHARGING=1
    else
        if [ "$CHARGING" -eq 1 ]; then
            log "Disconnected from AC"
        fi

        CHARGING=0
    fi

    if [ "$SSH_ACTIVE" -eq 1 ] || [ "$LOCKED" -eq 0 ] || [ "$CHARGING" -eq 0 ]; then
        if [ "$IN_USE" -eq 0 ]; then
            log "The system is now in use"
        fi

        IN_USE=1
    else
        if [ "$IN_USE" -eq 1 ]; then
            log "The system is no longer in use"
        fi

        IN_USE=0
    fi

    if [ -n "$DEBUG" ]; then
        echo "MINING: $MINING | IN_USE: $IN_USE | LOCKED_TIME: $(getLockedTime) | IDLE_TO_START: $IDLE_TO_START"
    fi

    if [ "$MINING" -eq 0 ] && [ "$IN_USE" -eq 0 ] && [ "$(getLockedTime)" -gt "$IDLE_TO_START" ]; then
        startMining
    elif [ "$MINING" -eq 1 ] && [ "$IN_USE" -eq 1 ]; then
        stopMining
    fi
}

quit() {
    killMining
    log "Killed tmux session and contained miners"
    exit
}

main() {
    initMining

    while true; do
        tick
        if [ "$LOCKED" -eq 0 ]; then
            sleep "$INTERVAL"
        elif [ "$LOCKED" -eq 1 ]; then
            sleep "$LOCKED_INTERVAL"
        fi
    done
}

trap quit INT

main
