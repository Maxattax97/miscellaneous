#! /usr/bin/env bash

XDG_CURRENT_DESKTOP="${XDG_CURRENT_DESKTOP:-bspwm}"
export XDG_CURRENT_DESKTOP
HOSTNAME="$(hostname)"
export HOSTNAME

bspc monitor -d I II III IV V VI VII VIII IX X

bspc config border_width            1
bspc config window_gap              6
bspc config top_padding             20

bspc config split_ratio             0.50
bspc config borderless_monocle      true
bspc config gapless_monocle         true
bspc config automatic_scheme		alternate

# Use `xprop` to find these, use 2nd entry of WM_CLASS.
bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2' state=tiled
#bspc rule -a firefox desktop='^2' state=tiled #state=fullscreen
bspc rule -a Firefox:Navigator desktop='^2' state=tiled
bspc rule -a Firefox:Browser state=floating
bspc rule -a Brave-browser desktop='^2' state=tiled
#bspc rule -a Brave-browser state=floating
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off
bspc rule -a nextcloud desktop='^10' state=tiled
bspc rule -a steam desktop='^4' state=floating
bspc rule -a discord desktop='^5' state=tiled
bspc rule -a copyq state=floating sticky
bspc rule -a Yad state=floating sticky

bspwm_log_root="/tmp/bspwm_logs"

function runOnce()
{
    cmd="${1}"
    fork="${2}"
    logfile="${3}"
    args="${*:4}"

    existing_pid="$(pidof "$cmd")"
    existing_pid_code=$?

    if [ $existing_pid_code -eq 0 ]; then
        echo "$cmd is already running, skipping ..."
        return
    fi

    exec_str="${cmd} ${args}"

    if [ -n $logfile ]; then
        if [ ! -d $bspwm_log_root ]; then
            mkdir -p $bspwm_log_root
        fi

        echo "=== BSPWM LOG BEGIN @ $(date -Iseconds) ===" > ${bspwm_log_root}/${logfile}
        exec_str="${exec_str} >>${bspwm_log_root}/${logfile} 2>&1"
    fi

    if [ $fork = true ]; then
        exec_str="${exec_str} &"
    fi

    echo "${exec_str}"
    eval "${exec_str}"
    #forked_pid=$!

    #if [ $fork = true ];
        #return forked_pid
    #fi
}

# Services
runOnce xrdb false xrdb.log "${HOME}/.Xdefaults" # Don't fork, will break other programs.
runOnce sxhkd true sxhkd.log
if [[ -x "$(command -v nm-applet)" ]]; then
    runOnce nm-applet true nm_applet.log
fi
if [[ -x "$(command -v flameshot)" ]]; then
    runOnce flameshot true flameshot.log
fi
if [[ -x "$(command -v pcmanfm)" ]]; then
    runOnce pcmanfm true pcmanfm.log --no-desktop --daemon-mode
fi
if [[ -x "$(command -v nitrogen)" ]]; then
    # Sometimes this crashes because X11 isn't ready yet.
    runOnce nitrogen true nitrogen.log --restore

    if [[ -x "$(command -v variety)" ]]; then
        runOnce variety true variety.log
    fi
fi

# Applications
runOnce st true st.log
runOnce dunst true dunst.log
runOnce copyq true copyq.log

if [[ "$HOSTNAME" == "Maxattax-Arch" ]]; then
    runOnce brave true brave.log --profile-directory="Default" # Personal

    if [[ -x "$(command -v nextcloud)" ]]; then
        runOnce nextcloud true nextcloud.log --background
    fi
elif [[ "$HOSTNAME" == "mocull-endeavor" ]]; then
    runOnce brave true brave.log --profile-directory="Profile 2" # Work
    runOnce brave true brave.log --profile-directory="Profile 3" # Personal

    # Fix bluetooth.
    #systemctl --user restart blueman-manager.service pipewire-pulse.service pipewire.service

    if [[ -x "$(command -v blueman-tray)" ]]; then
            # Sometimes I have to run `blueman-manager` once to get the services to kick in... odd.
        runOnce blueman-tray true blueman_tray.log
    fi
else
    #runOnce firefox true firefox.log
    runOnce brave true brave.log
fi

# TODO: Make it easy to reload polybar -- probably need to bundle in a script.
polybar workspaces -r &
polybar system -r &
#polybar workspaces-thin -r &

if [[ -x "$(command -v steam)" ]]; then
    runOnce steam true steam.log
    #(sleep 30 && runOnce steam true steam.log) &
fi
if [[ -x "$(command -v discord)" ]]; then
    runOnce discord true discord.log
    #(sleep 45 && runOnce discord true discord.log) &
fi

touch "${HOME}/.cache/max_enable_picom"
echo "1" > "${HOME}/.cache/max_enable_picom"

# Use the identifying characteristics of this monitor:
#   https://www.extron.com/article/uedid
if (xrandr --prop | grep -q '031e0104b55021783b64f5ad5049a322'); then
    echo "Upgrading to 120hz"
    xrandr --output DisplayPort-0 --mode 3440x1440 --rate 120
fi

while true; do
    pidof picom >> /dev/null 2>&1
    if [ $? -ne 0 ]; then
        if [ ! -s "${HOME}/.cache/max_enable_picom" ]; then
            echo "1" > "${HOME}/.cache/max_enable_picom"
        fi

        picom_enable=$(cat "${HOME}/.cache/max_enable_picom")
        echo "picom_enable = $picom_enable"
        if [ "$picom_enable" = "1" ]; then
            echo "Picom process died, restarting ..." >> "${bspwm_log_root}/picom.log"
            runOnce picom false picom.log --config ~/.config/compton/compton.conf -b
        fi
    fi

    sleep 5
done

#runOnce picom false picom.log --config ~/.config/compton/compton.conf --experimental-backends -b

# On Endeavor you will need to do these:
# Stop autoconnecting to ethernet, let it breathe, then reconnect.
#
# sudo dmesg --follow # for tracking kernel activity
# systemctl --user restart blueman-manager.service pipewire-pulse.service pipewire.service
